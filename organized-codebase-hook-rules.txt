# Organized Codebase Hook Rules
# These rules will be converted to JSON hooks using /project:rule2hook

# Documentation Management Hooks
Update README.md table of contents automatically when any new .md file is added to PLANNING/ directory
Check for broken internal markdown links when any .md file in PLANNING/, DOCUMENTATION/, or AGENT-HANDOFF/ is edited
Validate markdown formatting in all documentation files after editing any .md file
Generate documentation index when files are added to DOCUMENTATION/ directory

# Planning Synchronization Hooks
Update PLANNING/05-implementation-roadmap.md timeline when PLANNING/02-requirements.md is modified to keep project scope aligned
Cross-reference PLANNING/04-user-stories.md with PLANNING/02-requirements.md when either file changes to ensure story coverage
Validate completion checklist consistency when AGENT-HANDOFF/ files are modified
Update project description in README.md when PLANNING/01-project-brief.md changes

# Agent Handoff Coordination Hooks
Update AGENT-HANDOFF/coding-instructions.md automatically when PLANNING/03-architecture.md changes to keep agent guidance current
Sync AGENT-HANDOFF/file-structure.md when new directories or files are created anywhere in the project structure
Update AGENT-HANDOFF/completion-checklist.md when new features are added to PLANNING/05-implementation-roadmap.md
Update AGENT-HANDOFF/dependencies.md when architecture changes affect technical requirements in PLANNING/03-architecture.md

# Iteration Management Hooks
Create new folder in ITERATIONS/ with current date when version number in PLANNING/01-project-brief.md increments
Update iteration status when completing tasks in any version folder
Generate iteration summary when completing version milestones
Archive completed iterations to maintain project organization

# Project Structure Maintenance Hooks
Update setup-template.sh when project structure changes
Validate all referenced files exist when documentation is updated
Generate project tree structure when directories are added or removed
Maintain consistent formatting across all markdown files

# Quality Assurance Hooks
Spell check all markdown files after editing
Validate internal document references are correct after editing any .md file
Check that all user stories have corresponding architecture sections when PLANNING files change
Ensure implementation roadmap aligns with project requirements when planning documents are updated
Verify completion checklist covers all planned features when AGENT-HANDOFF or PLANNING files change
Generate quality report when major planning changes are made

# Development Workflow Hooks
Run git status when finishing any task to show project state
Execute project structure validation after modifying any planning document
Backup planning files before making structural changes
Generate planning summary when multiple planning files are edited in same session