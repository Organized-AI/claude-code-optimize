import React, { useState, useEffect, useCallback } from 'react';\nimport { useClaudeCodeCommands, PlanModeSession, PlanStep } from '../hooks/useClaudeCodeCommands';\n\ninterface PlanModeInterfaceProps {\n  sessionId?: string;\n  onClose?: () => void;\n}\n\nexport const PlanModeInterface: React.FC<PlanModeInterfaceProps> = ({\n  sessionId,\n  onClose\n}) => {\n  const {\n    activePlanSessions,\n    createPlanModeSession,\n    executePlanModeSession,\n    cancelPlanModeSession,\n    subscribeToPlanSession,\n    unsubscribeFromPlanSession,\n    error,\n    clearError\n  } = useClaudeCodeCommands();\n\n  const [selectedSession, setSelectedSession] = useState<PlanModeSession | null>(null);\n  const [isCreatingPlan, setIsCreatingPlan] = useState(false);\n  const [newPlanTitle, setNewPlanTitle] = useState('');\n  const [newPlanDescription, setNewPlanDescription] = useState('');\n  const [newPlanSteps, setNewPlanSteps] = useState<string[]>(['']);\n  const [autoExecute, setAutoExecute] = useState(false);\n  const [expandedSteps, setExpandedSteps] = useState<Set<string>>(new Set());\n\n  // Select session on mount or when sessionId changes\n  useEffect(() => {\n    if (sessionId) {\n      const session = activePlanSessions.find(s => s.id === sessionId);\n      if (session) {\n        setSelectedSession(session);\n        subscribeToPlanSession(sessionId);\n      }\n    } else if (activePlanSessions.length > 0 && !selectedSession) {\n      setSelectedSession(activePlanSessions[0]);\n      subscribeToPlanSession(activePlanSessions[0].id);\n    }\n\n    return () => {\n      if (sessionId) {\n        unsubscribeFromPlanSession(sessionId);\n      }\n    };\n  }, [sessionId, activePlanSessions, selectedSession, subscribeToPlanSession, unsubscribeFromPlanSession]);\n\n  // Update selected session when active sessions change\n  useEffect(() => {\n    if (selectedSession) {\n      const updated = activePlanSessions.find(s => s.id === selectedSession.id);\n      if (updated) {\n        setSelectedSession(updated);\n      }\n    }\n  }, [activePlanSessions, selectedSession]);\n\n  const handleCreatePlan = async () => {\n    if (!newPlanTitle.trim() || newPlanSteps.some(step => !step.trim())) {\n      return;\n    }\n\n    setIsCreatingPlan(true);\n    clearError();\n\n    try {\n      const validSteps = newPlanSteps.filter(step => step.trim());\n      const session = await createPlanModeSession(\n        newPlanTitle.trim(),\n        newPlanDescription.trim(),\n        validSteps,\n        autoExecute\n      );\n\n      setSelectedSession(session);\n      setIsCreatingPlan(false);\n      \n      // Reset form\n      setNewPlanTitle('');\n      setNewPlanDescription('');\n      setNewPlanSteps(['']);\n      setAutoExecute(false);\n      \n    } catch (error) {\n      console.error('Failed to create plan:', error);\n    } finally {\n      setIsCreatingPlan(false);\n    }\n  };\n\n  const handleExecutePlan = async (session: PlanModeSession) => {\n    try {\n      await executePlanModeSession(session.id);\n    } catch (error) {\n      console.error('Failed to execute plan:', error);\n    }\n  };\n\n  const handleCancelPlan = async (session: PlanModeSession) => {\n    try {\n      await cancelPlanModeSession(session.id);\n    } catch (error) {\n      console.error('Failed to cancel plan:', error);\n    }\n  };\n\n  const addPlanStep = () => {\n    setNewPlanSteps([...newPlanSteps, '']);\n  };\n\n  const removePlanStep = (index: number) => {\n    if (newPlanSteps.length > 1) {\n      setNewPlanSteps(newPlanSteps.filter((_, i) => i !== index));\n    }\n  };\n\n  const updatePlanStep = (index: number, value: string) => {\n    const updated = [...newPlanSteps];\n    updated[index] = value;\n    setNewPlanSteps(updated);\n  };\n\n  const toggleStepExpansion = (stepId: string) => {\n    const newExpandedSteps = new Set(expandedSteps);\n    if (newExpandedSteps.has(stepId)) {\n      newExpandedSteps.delete(stepId);\n    } else {\n      newExpandedSteps.add(stepId);\n    }\n    setExpandedSteps(newExpandedSteps);\n  };\n\n  const getStepStatusIcon = (status: PlanStep['status']): string => {\n    switch (status) {\n      case 'pending': return '‚è≥';\n      case 'in_progress': return 'üîÑ';\n      case 'completed': return '‚úÖ';\n      case 'failed': return '‚ùå';\n      case 'skipped': return '‚è≠Ô∏è';\n      default: return '‚ùì';\n    }\n  };\n\n  const getStepStatusColor = (status: PlanStep['status']): string => {\n    switch (status) {\n      case 'pending': return 'text-yellow-400 bg-yellow-400/20';\n      case 'in_progress': return 'text-blue-400 bg-blue-400/20';\n      case 'completed': return 'text-green-400 bg-green-400/20';\n      case 'failed': return 'text-red-400 bg-red-400/20';\n      case 'skipped': return 'text-gray-400 bg-gray-400/20';\n      default: return 'text-gray-400 bg-gray-400/20';\n    }\n  };\n\n  const getSessionStatusColor = (status: PlanModeSession['status']): string => {\n    switch (status) {\n      case 'pending': return 'text-yellow-400';\n      case 'in_progress': return 'text-blue-400';\n      case 'completed': return 'text-green-400';\n      case 'failed': return 'text-red-400';\n      case 'cancelled': return 'text-gray-400';\n      default: return 'text-gray-400';\n    }\n  };\n\n  const formatDuration = (ms: number): string => {\n    const seconds = Math.floor(ms / 1000);\n    const minutes = Math.floor(seconds / 60);\n    const hours = Math.floor(minutes / 60);\n    \n    if (hours > 0) {\n      return `${hours}h ${minutes % 60}m ${seconds % 60}s`;\n    } else if (minutes > 0) {\n      return `${minutes}m ${seconds % 60}s`;\n    } else {\n      return `${seconds}s`;\n    }\n  };\n\n  return (\n    <div className=\"h-full flex flex-col space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-4\">\n          <h3 className=\"text-lg font-semibold text-moonlock-400\">Plan Mode</h3>\n          {onClose && (\n            <button\n              onClick={onClose}\n              className=\"text-dark-400 hover:text-white transition-colors\"\n            >\n              ‚úï\n            </button>\n          )}\n        </div>\n        \n        <div className=\"flex items-center space-x-2\">\n          <button\n            onClick={() => setIsCreatingPlan(!isCreatingPlan)}\n            className=\"px-4 py-2 bg-moonlock-600 text-white rounded-lg hover:bg-moonlock-700 transition-colors\"\n          >\n            {isCreatingPlan ? 'Cancel' : '+ New Plan'}\n          </button>\n        </div>\n      </div>\n\n      {/* Error Display */}\n      {error && (\n        <div className=\"bg-red-500/20 border border-red-500/30 rounded-lg p-3\">\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-red-400\">‚ö†Ô∏è {error}</span>\n            <button\n              onClick={clearError}\n              className=\"text-red-400 hover:text-red-300\"\n            >\n              ‚úï\n            </button>\n          </div>\n        </div>\n      )}\n\n      {/* Create New Plan */}\n      {isCreatingPlan && (\n        <div className=\"bg-dark-800 border border-dark-700 rounded-lg p-6 space-y-4\">\n          <h4 className=\"text-md font-semibold text-white mb-4\">Create New Plan</h4>\n          \n          <div className=\"space-y-4\">\n            <div>\n              <label className=\"block text-sm text-dark-400 mb-2\">Plan Title *</label>\n              <input\n                type=\"text\"\n                value={newPlanTitle}\n                onChange={(e) => setNewPlanTitle(e.target.value)}\n                placeholder=\"Enter plan title...\"\n                className=\"w-full bg-dark-700 border border-dark-600 rounded-lg px-4 py-2 text-white placeholder-dark-400 focus:border-moonlock-500 focus:outline-none\"\n              />\n            </div>\n            \n            <div>\n              <label className=\"block text-sm text-dark-400 mb-2\">Description</label>\n              <textarea\n                value={newPlanDescription}\n                onChange={(e) => setNewPlanDescription(e.target.value)}\n                placeholder=\"Describe what this plan will accomplish...\"\n                className=\"w-full bg-dark-700 border border-dark-600 rounded-lg px-4 py-2 text-white placeholder-dark-400 focus:border-moonlock-500 focus:outline-none resize-none\"\n                rows={3}\n              />\n            </div>\n            \n            <div>\n              <label className=\"block text-sm text-dark-400 mb-2\">Plan Steps *</label>\n              <div className=\"space-y-2\">\n                {newPlanSteps.map((step, index) => (\n                  <div key={index} className=\"flex items-center space-x-2\">\n                    <span className=\"text-dark-400 text-sm w-6\">{index + 1}.</span>\n                    <input\n                      type=\"text\"\n                      value={step}\n                      onChange={(e) => updatePlanStep(index, e.target.value)}\n                      placeholder={`Step ${index + 1} (use /command for slash commands)`}\n                      className=\"flex-1 bg-dark-700 border border-dark-600 rounded-lg px-4 py-2 text-white placeholder-dark-400 focus:border-moonlock-500 focus:outline-none\"\n                    />\n                    {newPlanSteps.length > 1 && (\n                      <button\n                        onClick={() => removePlanStep(index)}\n                        className=\"text-red-400 hover:text-red-300 p-2\"\n                      >\n                        ‚úï\n                      </button>\n                    )}\n                  </div>\n                ))}\n                \n                <button\n                  onClick={addPlanStep}\n                  className=\"text-moonlock-400 hover:text-moonlock-300 text-sm flex items-center space-x-1\"\n                >\n                  <span>+</span>\n                  <span>Add Step</span>\n                </button>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center space-x-2\">\n              <input\n                type=\"checkbox\"\n                id=\"autoExecute\"\n                checked={autoExecute}\n                onChange={(e) => setAutoExecute(e.target.checked)}\n                className=\"rounded border-dark-600 bg-dark-700 text-moonlock-500 focus:ring-moonlock-500\"\n              />\n              <label htmlFor=\"autoExecute\" className=\"text-sm text-dark-300\">\n                Auto-execute plan (run all steps automatically)\n              </label>\n            </div>\n          </div>\n          \n          <div className=\"flex items-center space-x-4 pt-4\">\n            <button\n              onClick={handleCreatePlan}\n              disabled={isCreatingPlan || !newPlanTitle.trim() || newPlanSteps.every(s => !s.trim())}\n              className=\"px-6 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors flex items-center space-x-2\"\n            >\n              {isCreatingPlan ? (\n                <>\n                  <div className=\"animate-spin w-4 h-4 border-2 border-white border-t-transparent rounded-full\"></div>\n                  <span>Creating...</span>\n                </>\n              ) : (\n                <span>Create Plan</span>\n              )}\n            </button>\n            \n            <button\n              onClick={() => setIsCreatingPlan(false)}\n              className=\"px-6 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition-colors\"\n            >\n              Cancel\n            </button>\n          </div>\n        </div>\n      )}\n\n      {/* Active Plan Sessions */}\n      <div className=\"flex-1 space-y-4\">\n        {activePlanSessions.length === 0 ? (\n          <div className=\"h-full flex items-center justify-center\">\n            <div className=\"text-center space-y-4\">\n              <div className=\"w-16 h-16 bg-gray-500/20 rounded-full flex items-center justify-center mx-auto\">\n                <span className=\"text-gray-400 text-2xl\">üìã</span>\n              </div>\n              <div className=\"space-y-2\">\n                <p className=\"text-gray-400 font-medium\">No active plans</p>\n                <p className=\"text-dark-400 text-sm\">Create a new plan to get started</p>\n              </div>\n            </div>\n          </div>\n        ) : (\n          <div className=\"space-y-4\">\n            {activePlanSessions.map((session) => (\n              <div key={session.id} className=\"bg-dark-800 border border-dark-700 rounded-lg overflow-hidden\">\n                {/* Session Header */}\n                <div className=\"p-4 border-b border-dark-700\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <h4 className=\"text-md font-semibold text-white\">{session.title}</h4>\n                    <div className=\"flex items-center space-x-2\">\n                      <span className={`text-sm px-2 py-1 rounded-full bg-dark-600 capitalize ${getSessionStatusColor(session.status)}`}>\n                        {session.status}\n                      </span>\n                      {session.status === 'pending' && (\n                        <button\n                          onClick={() => handleExecutePlan(session)}\n                          className=\"px-3 py-1 text-xs bg-green-600 text-white rounded hover:bg-green-700 transition-colors\"\n                        >\n                          ‚ñ∂Ô∏è Execute\n                        </button>\n                      )}\n                      {session.status === 'in_progress' && (\n                        <button\n                          onClick={() => handleCancelPlan(session)}\n                          className=\"px-3 py-1 text-xs bg-red-600 text-white rounded hover:bg-red-700 transition-colors\"\n                        >\n                          ‚èπÔ∏è Cancel\n                        </button>\n                      )}\n                    </div>\n                  </div>\n                  \n                  {session.description && (\n                    <p className=\"text-sm text-dark-300 mb-3\">{session.description}</p>\n                  )}\n                  \n                  <div className=\"flex items-center space-x-4 text-xs text-dark-400\">\n                    <span>üìÖ {new Date(session.createdAt).toLocaleString()}</span>\n                    <span>üî¢ {session.steps.length} steps</span>\n                    {session.autoExecute && <span>‚ö° Auto-execute</span>}\n                  </div>\n                </div>\n                \n                {/* Progress Bar */}\n                <div className=\"px-4 py-2 bg-dark-700/50\">\n                  <div className=\"flex items-center justify-between text-xs text-dark-400 mb-1\">\n                    <span>Progress</span>\n                    <span>\n                      {session.steps.filter(s => s.status === 'completed').length} / {session.steps.length} completed\n                    </span>\n                  </div>\n                  <div className=\"w-full bg-dark-600 rounded-full h-2\">\n                    <div \n                      className=\"bg-moonlock-500 h-2 rounded-full transition-all duration-300\"\n                      style={{ \n                        width: `${(session.steps.filter(s => s.status === 'completed').length / session.steps.length) * 100}%` \n                      }}\n                    />\n                  </div>\n                </div>\n\n                {/* Steps */}\n                <div className=\"p-4 space-y-3\">\n                  {session.steps.map((step, index) => (\n                    <div key={step.id} className=\"border border-dark-600 rounded-lg overflow-hidden\">\n                      <div \n                        className={`p-3 cursor-pointer hover:bg-dark-700/50 transition-colors ${\n                          step.status === 'in_progress' ? 'bg-blue-500/10' : ''\n                        }`}\n                        onClick={() => toggleStepExpansion(step.id)}\n                      >\n                        <div className=\"flex items-center justify-between\">\n                          <div className=\"flex items-center space-x-3\">\n                            <span className=\"text-dark-400 font-mono text-sm w-8\">\n                              {index + 1}.\n                            </span>\n                            <span className={`text-sm px-2 py-1 rounded ${getStepStatusColor(step.status)}`}>\n                              {getStepStatusIcon(step.status)}\n                            </span>\n                            <span className=\"text-white\">{step.description}</span>\n                            {step.command && (\n                              <code className=\"text-yellow-400 text-xs bg-dark-600 px-2 py-1 rounded\">\n                                {step.command}\n                              </code>\n                            )}\n                          </div>\n                          \n                          <div className=\"flex items-center space-x-2\">\n                            {step.duration && (\n                              <span className=\"text-xs text-dark-400\">\n                                {formatDuration(step.duration)}\n                              </span>\n                            )}\n                            <span className={`text-sm transition-transform ${\n                              expandedSteps.has(step.id) ? 'rotate-180' : ''\n                            }`}>\n                              ‚ñº\n                            </span>\n                          </div>\n                        </div>\n                      </div>\n                      \n                      {/* Step Details */}\n                      {expandedSteps.has(step.id) && (\n                        <div className=\"p-3 border-t border-dark-600 bg-dark-700/30 space-y-3\">\n                          {step.output && (\n                            <div>\n                              <label className=\"block text-xs text-dark-400 mb-1\">Output:</label>\n                              <pre className=\"text-sm text-green-400 bg-dark-800 p-3 rounded border font-mono whitespace-pre-wrap overflow-x-auto\">\n                                {step.output}\n                              </pre>\n                            </div>\n                          )}\n                          \n                          {step.error && (\n                            <div>\n                              <label className=\"block text-xs text-dark-400 mb-1\">Error:</label>\n                              <pre className=\"text-sm text-red-400 bg-red-500/10 border border-red-500/20 p-3 rounded font-mono whitespace-pre-wrap overflow-x-auto\">\n                                {step.error}\n                              </pre>\n                            </div>\n                          )}\n                          \n                          {step.timestamp && (\n                            <div className=\"text-xs text-dark-400\">\n                              Executed at: {new Date(step.timestamp).toLocaleString()}\n                            </div>\n                          )}\n                        </div>\n                      )}\n                    </div>\n                  ))}\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};