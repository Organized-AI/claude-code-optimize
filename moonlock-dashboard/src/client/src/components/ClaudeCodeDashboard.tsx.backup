import React, { useState, useEffect } from 'react';
import { ChevronDown, Shield, HardDrive, Cpu, Wifi, Smartphone, AlertCircle, Clock, Code, Zap, Calendar, TrendingUp, Play, Pause, RotateCcw, Eye, ChevronRight, Activity, Timer, BarChart3 } from 'lucide-react';

// TypeScript interfaces
interface ParticleFieldProps {
  density?: number;
  color?: string;
}

interface PulseOrbProps {
  status: 'active' | 'waiting' | 'warning' | 'critical';
  size?: number;
}

interface AnimatedNumberProps {
  value: number;
  suffix?: string;
}

interface GlassCardProps {
  children: React.ReactNode;
  className?: string;
  glow?: boolean;
  onClick?: (() => void) | null;
}

interface SessionHistoryItemProps {
  session: any;
  onClick: (session: any) => void;
}

interface WeeklyQuotaBarProps {
  used: number;
  total: number;
  label: string;
  color: string;
}

interface CircularTimerProps {
  timeElapsed: number;
  totalTime: number;
  isActive: boolean;
}

interface UsageTrendChartProps {
  data: number[];
}

// React-Bits inspired components
const ParticleField: React.FC<ParticleFieldProps> = ({ density = 20, color = '#60A5FA' }) => {
  const particles = Array.from({ length: density }, (_, i) => (
    <div
      key={i}
      className="absolute rounded-full animate-float"
      style={{
        width: Math.random() * 4 + 'px',
        height: Math.random() * 4 + 'px',
        left: Math.random() * 100 + '%',
        top: Math.random() * 100 + '%',
        backgroundColor: color,
        opacity: Math.random() * 0.5 + 0.2,
        animationDelay: Math.random() * 5 + 's',
        animationDuration: Math.random() * 10 + 10 + 's'
      }}
    />
  ));

  return <div className="absolute inset-0 overflow-hidden">{particles}</div>;
};

const CircularTimer: React.FC<CircularTimerProps> = ({ timeElapsed, totalTime, isActive }) => {
  const percentage = totalTime > 0 ? (timeElapsed / totalTime) * 100 : 0;
  const radius = 45;
  const strokeWidth = 6;
  const normalizedRadius = radius - strokeWidth * 2;
  const circumference = normalizedRadius * 2 * Math.PI;
  const strokeDasharray = `${circumference} ${circumference}`;
  const strokeDashoffset = circumference - (percentage / 100) * circumference;

  const formatTime = (seconds: number) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}:${secs.toString().padStart(2, '0')}`;
  };

  return (
    <div className="relative w-32 h-32">
      <svg
        height={radius * 2}
        width={radius * 2}
        className="transform -rotate-90"
      >
        <circle
          stroke="rgba(255,255,255,0.1)"
          fill="transparent"
          strokeWidth={strokeWidth}
          r={normalizedRadius}
          cx={radius}
          cy={radius}
        />
        <circle
          stroke={isActive ? "#ef4444" : "#60a5fa"}
          fill="transparent"
          strokeWidth={strokeWidth}
          strokeDasharray={strokeDasharray}
          style={{ strokeDashoffset }}
          strokeLinecap="round"
          r={normalizedRadius}
          cx={radius}
          cy={radius}
          className="transition-all duration-300 ease-in-out"
        />
      </svg>
      <div className="absolute inset-0 flex flex-col items-center justify-center">
        <span className={`text-2xl font-bold ${isActive ? 'text-red-400' : 'text-blue-400'}`}>
          {formatTime(timeElapsed)}
        </span>
        <span className="text-xs text-gray-400">
          {Math.round(percentage)}%
        </span>
      </div>
    </div>
  );
};

const UsageTrendChart: React.FC<UsageTrendChartProps> = ({ data }) => {
  const maxValue = Math.max(...data);
  
  return (
    <div className="w-full h-20 flex items-end justify-between gap-1">
      {data.map((value, index) => {
        const height = (value / maxValue) * 100;
        return (
          <div
            key={index}
            className="bg-blue-400 rounded-t transition-all duration-300"
            style={{
              height: `${height}%`,
              width: `${100 / data.length - 2}%`,
              opacity: 0.7 + (height / 100) * 0.3
            }}
          />
        );
      })}
    </div>
  );
};

const PhaseProgressBar: React.FC<{
  phase: string;
  current: number;
  total: number;
  underBudget: number;
  isCompleted: boolean;
}> = ({ phase, current, total, underBudget, isCompleted }) => {
  const percentage = (current / total) * 100;
  
  return (
    <div className="mb-4">
      <div className="flex justify-between items-center mb-2">
        <span className="text-sm font-medium text-gray-200">{phase}</span>
        <span className="text-xs text-gray-400">
          {current}/{total} {percentage.toFixed(0)}%
        </span>
      </div>
      <div className="w-full h-2 bg-gray-700 rounded-full overflow-hidden">
        <div 
          className={`h-full transition-all duration-500 ${
            isCompleted ? 'bg-green-500' : 'bg-blue-500'
          }`}
          style={{ width: `${Math.min(percentage, 100)}%` }}
        />
      </div>
      <div className="flex justify-between items-center mt-1">
        <span className="text-xs text-gray-500">
          Estimated: {total} prompts
        </span>
        <span className="text-xs text-green-400">
          {underBudget}% under budget
        </span>
      </div>
    </div>
  );
};

const PulseOrb: React.FC<PulseOrbProps> = ({ status, size = 80 }) => {
  const colors = {
    active: 'from-green-400 to-emerald-600',
    waiting: 'from-blue-400 to-indigo-600',
    warning: 'from-yellow-400 to-orange-600',
    critical: 'from-red-400 to-rose-600'
  };

  return (
    <div className="relative" style={{ width: size, height: size }}>
      <div className={`absolute inset-0 rounded-full bg-gradient-to-br ${colors[status]} animate-pulse`} />
      <div className={`absolute inset-2 rounded-full bg-gradient-to-br ${colors[status]} opacity-80`} />
      <div className="absolute inset-0 rounded-full backdrop-blur-sm bg-white/10" />
    </div>
  );
};

const AnimatedNumber: React.FC<AnimatedNumberProps> = ({ value, suffix = '' }) => {
  const [displayValue, setDisplayValue] = useState(0);

  useEffect(() => {
    const timer = setInterval(() => {
      setDisplayValue(prev => {
        const diff = value - prev;
        if (Math.abs(diff) < 0.1) return value;
        return prev + diff * 0.1;
      });
    }, 50);
    return () => clearInterval(timer);
  }, [value]);

  return <span>{Math.round(displayValue)}{suffix}</span>;
};

const GlassCard: React.FC<GlassCardProps> = ({ children, className = '', glow = false, onClick = null }) => {
  return (
    <div 
      onClick={onClick}
      className={`
        relative overflow-hidden rounded-2xl
        bg-white/5 backdrop-blur-xl
        border border-white/10
        ${glow ? 'shadow-2xl shadow-blue-500/20' : ''}
        ${onClick ? 'cursor-pointer hover:bg-white/10 transition-all' : ''}
        ${className}
      `}
    >
      {glow && (
        <div className="absolute inset-0 bg-gradient-to-br from-blue-500/10 to-purple-500/10" />
      )}
      <div className="relative z-10">{children}</div>
    </div>
  );
};

const SessionHistoryItem: React.FC<SessionHistoryItemProps> = ({ session, onClick }) => {
  const getStatusColor = (status) => {
    switch(status) {
      case 'completed': return 'text-green-400';
      case 'paused': return 'text-yellow-400';
      case 'error': return 'text-red-400';
      default: return 'text-gray-400';
    }
  };

  const getStatusIcon = (status) => {
    switch(status) {
      case 'completed': return <Shield className="w-4 h-4" />;
      case 'paused': return <Pause className="w-4 h-4" />;
      case 'error': return <AlertCircle className="w-4 h-4" />;
      default: return <Clock className="w-4 h-4" />;
    }
  };

  return (
    <GlassCard className="p-4 mb-3" onClick={() => onClick(session)}>
      <div className="flex items-start justify-between">
        <div className="flex-1">
          <div className="flex items-center gap-2 mb-2">
            <div className={getStatusColor(session.status)}>
              {getStatusIcon(session.status)}
            </div>
            <h4 className="font-medium text-sm">{session.project}</h4>
            <span className="text-xs text-gray-400">#{session.id}</span>
          </div>
          <p className="text-xs text-gray-300 mb-2">{session.description}</p>
          <div className="flex items-center gap-4 text-xs text-gray-400">
            <span>‚è± {session.duration}</span>
            <span>üéØ {session.tokensUsed}/{session.tokenBudget} prompts</span>
            <span>üìä {session.efficiency}% efficient</span>
          </div>
        </div>
        <div className="flex flex-col items-end gap-1">
          <span className="text-xs text-gray-400">{session.date}</span>
          <ChevronRight className="w-3 h-3 text-gray-500" />
        </div>
      </div>
    </GlassCard>
  );
};

const WeeklyQuotaBar: React.FC<WeeklyQuotaBarProps> = ({ used, total, label, color }) => {
  const percentage = (used / total) * 100;
  return (
    <div className="mb-3">
      <div className="flex justify-between items-center mb-1">
        <span className="text-sm text-gray-300">{label}</span>
        <span className="text-xs text-gray-400">{used}h / {total}h</span>
      </div>
      <div className="w-full h-2 bg-white/10 rounded-full overflow-hidden">
        <div 
          className={`h-full bg-gradient-to-r ${color} transition-all duration-500`}
          style={{ width: `${Math.min(percentage, 100)}%` }}
        />
      </div>
      <div className="flex justify-between items-center mt-1">
        <span className="text-xs text-gray-500">{percentage.toFixed(1)}% used</span>
        <span className="text-xs text-gray-500">{(total - used).toFixed(1)}h remaining</span>
      </div>
    </div>
  );
};

export default function ClaudeCodeDashboard() {
  const [hasActiveSession, setHasActiveSession] = useState(true);
  const [currentSession, setCurrentSession] = useState({
    project: 'Moonlock Dashboard Build - 5-Complete',
    timeElapsed: 0,
    totalTime: 10800, // 3 hours in seconds
    tokensUsed: 0,
    currentRate: 0.0,
    projectedTotal: 0,
    efficiency: 50,
    budgetUsed: 0,
    budgetTotal: 10000
  });
  const [selectedSession, setSelectedSession] = useState(null);
  const [weeklyQuota, setWeeklyQuota] = useState({
    sonnet: { used: 23.5, total: 480 },
    opus: { used: 2.1, total: 40 }
  });

  // Mock real-time data
  const [usageTrendData] = useState([
    80, 85, 70, 90, 95, 75, 85, 100, 88, 92, 78, 85, 90, 95, 88, 82, 87, 93, 85, 89
  ]);

  const [phaseData] = useState([
    { phase: 'Architecture', current: 8, total: 8, underBudget: 0, isCompleted: true },
    { phase: 'Implementation', current: 22, total: 52, underBudget: 58, isCompleted: false },
    { phase: 'Testing', current: 5, total: 20, underBudget: 75, isCompleted: false }
  ]);

  // Mock session data - this would come from your actual session tracking
  const [recentSessions] = useState([
    {
      id: 'CCO-001',
      project: 'Moonlock Dashboard Enhancement',
      description: 'Session management and token optimization infrastructure',
      status: 'completed',
      date: '2 hours ago',
      duration: '4h 23m',
      tokensUsed: 87,
      tokenBudget: 95,
      efficiency: 92,
      model: 'Sonnet 4',
      deliverables: ['Session state management', 'Token utilization monitor', 'Testing suite']
    },
    {
      id: 'CCO-002', 
      project: 'Calendar Integration API',
      description: 'Google Calendar and iCal automation system',
      status: 'paused',
      date: 'Yesterday',
      duration: '3h 45m',
      tokensUsed: 63,
      tokenBudget: 80,
      efficiency: 89,
      model: 'Sonnet 4',
      deliverables: ['Calendar API setup', 'Event creation logic', 'Conflict detection']
    },
    {
      id: 'CCO-003',
      project: 'Sub-Agent Architecture',
      description: 'Specialized agent coordination and parallel processing',
      status: 'completed',
      date: '2 days ago', 
      duration: '5h 12m',
      tokensUsed: 112,
      tokenBudget: 120,
      efficiency: 94,
      model: 'Opus 4',
      deliverables: ['Agent framework', 'Message coordination', 'Performance monitoring']
    },
    {
      id: 'CCO-004',
      project: 'Weekly Optimization Protocol',
      description: 'Automated quota management and emergency protocols',
      status: 'completed',
      date: '3 days ago',
      duration: '2h 56m',
      tokensUsed: 45,
      tokenBudget: 60,
      efficiency: 88,
      model: 'Sonnet 4',
      deliverables: ['Quota tracking', 'Alert system', 'Emergency failover']
    }
  ]);

  // Timer and session simulation
  useEffect(() => {
    if (hasActiveSession && currentSession) {
      const timer = setInterval(() => {
        setCurrentSession(prev => {
          if (prev && prev.timeElapsed < prev.totalTime) {
            const newTimeElapsed = prev.timeElapsed + 1;
            const newRate = (prev.tokensUsed / (newTimeElapsed / 60)) || 0;
            const newProjected = Math.round(newRate * (prev.totalTime / 60));
            
            return {
              ...prev,
              timeElapsed: newTimeElapsed,
              currentRate: Number(newRate.toFixed(1)),
              projectedTotal: newProjected,
              efficiency: Math.min(50 + (newTimeElapsed / 60) * 2, 100)
            };
          }
          return prev;
        });
      }, 1000);

      return () => clearInterval(timer);
    }
  }, [hasActiveSession, currentSession?.timeElapsed]);

  const handleSessionClick = (session) => {
    setSelectedSession(session);
  };

  const handleBackToHistory = () => {
    setSelectedSession(null);
  };

  const handleStartSession = () => {
    // TODO: Integrate with Claude Code SDK
    console.log('Starting new Claude Code session...');
    // This will be implemented with SDK integration
  };

  const handlePlanProject = () => {
    // TODO: Integrate with project analyzer
    console.log('Planning new project...');
    // This will be implemented with project analysis
  };

  if (selectedSession) {
    return (
      <div className="w-[420px] h-[800px] bg-gradient-to-br from-purple-900/90 via-blue-900/90 to-indigo-900/90 text-white overflow-hidden relative">
        <ParticleField density={20} color="#60A5FA" />
        
        <div className="relative z-10 p-6 space-y-4">
          <div className="flex items-center gap-3 mb-4">
            <button 
              onClick={handleBackToHistory}
              className="p-2 rounded-lg bg-white/10 hover:bg-white/20 transition-colors"
            >
              <RotateCcw className="w-4 h-4" />
            </button>
            <div>
              <h1 className="text-lg font-bold">Session Details</h1>
              <p className="text-sm text-gray-300">#{selectedSession.id}</p>
            </div>
          </div>

          <GlassCard className="p-4" glow>
            <h3 className="font-medium mb-2">{selectedSession.project}</h3>
            <p className="text-sm text-gray-300 mb-4">{selectedSession.description}</p>
            
            <div className="grid grid-cols-2 gap-4 mb-4">
              <div>
                <p className="text-xs text-gray-400">Duration</p>
                <p className="text-sm font-medium">{selectedSession.duration}</p>
              </div>
              <div>
                <p className="text-xs text-gray-400">Model</p>
                <p className="text-sm font-medium">{selectedSession.model}</p>
              </div>
              <div>
                <p className="text-xs text-gray-400">Token Usage</p>
                <p className="text-sm font-medium">{selectedSession.tokensUsed}/{selectedSession.tokenBudget}</p>
              </div>
              <div>
                <p className="text-xs text-gray-400">Efficiency</p>
                <p className="text-sm font-medium">{selectedSession.efficiency}%</p>
              </div>
            </div>

            <div className="w-full h-2 bg-white/10 rounded-full overflow-hidden mb-4">
              <div 
                className="h-full bg-gradient-to-r from-green-400 to-emerald-600 transition-all duration-500"
                style={{ width: `${(selectedSession.tokensUsed / selectedSession.tokenBudget) * 100}%` }}
              />
            </div>
          </GlassCard>

          <GlassCard className="p-4">
            <h4 className="font-medium mb-3">Deliverables</h4>
            <div className="space-y-2">
              {selectedSession.deliverables.map((deliverable, index) => (
                <div key={index} className="flex items-center gap-2">
                  <Shield className="w-4 h-4 text-green-400" />
                  <span className="text-sm text-gray-300">{deliverable}</span>
                </div>
              ))}
            </div>
          </GlassCard>

          <div className="grid grid-cols-2 gap-3">
            <button className="p-3 bg-blue-500/20 hover:bg-blue-500/30 rounded-lg text-sm transition-colors">
              Resume Session
            </button>
            <button className="p-3 bg-white/10 hover:bg-white/20 rounded-lg text-sm transition-colors">
              View Context
            </button>
          </div>
        </div>
      </div>
    );
  }

  if (hasActiveSession && currentSession) {
    // MoonLock Dashboard Active Session View
    return (
      <div className="w-full h-screen bg-gray-900 text-white overflow-hidden relative">
        <ParticleField density={30} color="#60A5FA" />
        
        <div className="relative z-10 p-6">
          {/* Header */}
          <div className="flex items-center justify-between mb-6">
            <div>
              <h1 className="text-2xl font-bold text-blue-400">MoonLock Dashboard</h1>
              <p className="text-sm text-gray-400">AI Session Monitoring & Token Tracking</p>
            </div>
            <div className="flex gap-2">
              <button className="px-4 py-2 bg-blue-500 text-white rounded-lg text-sm">
                Current Session
              </button>
              <button className="px-4 py-2 bg-gray-700 text-gray-300 rounded-lg text-sm">
                History
              </button>
            </div>
          </div>

          {/* Active Session Banner */}
          <div className="bg-green-800/20 border border-green-500/30 rounded-lg p-4 mb-6">
            <div className="flex items-center gap-3">
              <div className="w-3 h-3 bg-green-400 rounded-full animate-pulse"></div>
              <span className="text-green-400 font-medium">Claude Code Session Active</span>
            </div>
            <p className="text-sm text-green-300 mt-1">
              Automatically tracking: {currentSession.project}
            </p>
          </div>

          {/* Main Dashboard Grid */}
          <div className="grid grid-cols-2 gap-6">
            {/* Session Timer */}
            <GlassCard className="p-6">
              <div className="flex items-center gap-2 mb-4">
                <Timer className="w-5 h-5 text-blue-400" />
                <h3 className="font-medium">Session Timer</h3>
              </div>
              
              <div className="flex flex-col items-center">
                <CircularTimer 
                  timeElapsed={currentSession.timeElapsed}
                  totalTime={currentSession.totalTime}
                  isActive={true}
                />
                <div className="mt-4 text-center">
                  <div className="flex items-center gap-2 mb-2">
                    <div className="w-2 h-2 bg-green-400 rounded-full"></div>
                    <span className="text-sm">ACTIVE</span>
                  </div>
                  <p className="text-xs text-gray-400">
                    Elapsed: {Math.floor(currentSession.timeElapsed / 60)}m
                  </p>
                  {currentSession.timeElapsed > 7200 && (
                    <div className="flex items-center gap-1 mt-2 text-yellow-400">
                      <AlertCircle className="w-4 h-4" />
                      <span className="text-xs">Session ending soon!</span>
                    </div>
                  )}
                </div>
              </div>
            </GlassCard>

            {/* Token Usage */}
            <GlassCard className="p-6">
              <div className="flex items-center gap-2 mb-4">
                <Zap className="w-5 h-5 text-yellow-400" />
                <h3 className="font-medium">Token Usage</h3>
              </div>
              
              <div className="grid grid-cols-3 gap-4 mb-4">
                <div>
                  <p className="text-xs text-gray-400">TOKENS USED</p>
                  <p className="text-xl font-bold text-blue-400">{currentSession.tokensUsed}</p>
                </div>
                <div>
                  <p className="text-xs text-gray-400">CURRENT RATE</p>
                  <p className="text-xl font-bold text-green-400">{currentSession.currentRate}/min</p>
                </div>
                <div>
                  <p className="text-xs text-gray-400">PROJECTED TOTAL</p>
                  <p className="text-xl font-bold text-gray-300">{currentSession.projectedTotal}</p>
                  <p className="text-xs text-gray-500">Low confidence</p>
                </div>
                <div>
                  <p className="text-xs text-gray-400">EFFICIENCY</p>
                  <p className="text-xl font-bold text-yellow-400">{Math.round(currentSession.efficiency)}%</p>
                </div>
              </div>

              <div className="mb-4">
                <div className="flex justify-between text-xs text-gray-400 mb-1">
                  <span>Budget Usage</span>
                  <span>{currentSession.budgetUsed} / {currentSession.budgetTotal.toLocaleString()}</span>
                </div>
                <div className="w-full h-2 bg-gray-700 rounded-full">
                  <div 
                    className="h-full bg-blue-400 rounded-full transition-all duration-300"
                    style={{ width: `${(currentSession.budgetUsed / currentSession.budgetTotal) * 100}%` }}
                  />
                </div>
                <p className="text-xs text-gray-500 mt-1">0.0%</p>
              </div>

              <div>
                <p className="text-xs text-gray-400 mb-2">Usage Rate Trend</p>
                <UsageTrendChart data={usageTrendData} />
              </div>
            </GlassCard>

            {/* Phase Progress */}
            <GlassCard className="p-6">
              <div className="flex items-center gap-2 mb-4">
                <BarChart3 className="w-5 h-5 text-purple-400" />
                <h3 className="font-medium">Phase Progress</h3>
              </div>
              
              {phaseData.map((phase) => (
                <PhaseProgressBar
                  key={phase.phase}
                  phase={phase.phase}
                  current={phase.current}
                  total={phase.total}
                  underBudget={phase.underBudget}
                  isCompleted={phase.isCompleted}
                />
              ))}
            </GlassCard>

            {/* Usage Trend */}
            <GlassCard className="p-6">
              <div className="flex items-center gap-2 mb-4">
                <TrendingUp className="w-5 h-5 text-blue-400" />
                <h3 className="font-medium">Usage Trend</h3>
              </div>
              
              <div className="h-40 mb-4">
                <UsageTrendChart data={usageTrendData} />
              </div>

              <div className="grid grid-cols-2 gap-4 text-center">
                <div>
                  <p className="text-xs text-gray-400">PEAK</p>
                  <p className="text-2xl font-bold text-blue-400">145</p>
                </div>
                <div>
                  <p className="text-xs text-gray-400">AVG</p>
                  <p className="text-2xl font-bold text-blue-400">100</p>
                </div>
              </div>
              
              <p className="text-xs text-gray-500 text-center mt-2">
                Token Usage Over Time
              </p>
            </GlassCard>
          </div>
        </div>
      </div>
    );
  }

  // Waiting state with session history
  return (
    <div className="w-[420px] h-[800px] bg-gradient-to-br from-purple-900/90 via-blue-900/90 to-indigo-900/90 text-white overflow-hidden relative">
      <ParticleField density={25} color="#60A5FA" />
      
      <div className="relative z-10 p-6 space-y-6">
        {/* Header */}
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-4">
            <PulseOrb status="waiting" size={60} />
            <div>
              <h1 className="text-xl font-bold">Waiting for Session</h1>
              <p className="text-sm text-gray-300">Claude Code Optimizer</p>
            </div>
          </div>
        </div>

        {/* Weekly Quota Status */}
        <GlassCard className="p-4" glow>
          <div className="flex items-center gap-2 mb-3">
            <TrendingUp className="w-5 h-5 text-blue-400" />
            <span className="font-medium">Weekly Quota Status</span>
          </div>
          
          <WeeklyQuotaBar 
            used={weeklyQuota.sonnet.used}
            total={weeklyQuota.sonnet.total}
            label="Claude Sonnet 4"
            color="from-blue-400 to-blue-600"
          />
          
          <WeeklyQuotaBar 
            used={weeklyQuota.opus.used}
            total={weeklyQuota.opus.total}
            label="Claude Opus 4"  
            color="from-purple-400 to-purple-600"
          />

          <div className="pt-2 border-t border-white/10">
            <p className="text-xs text-gray-400">
              Estimated sessions remaining: <span className="text-green-400 font-medium">23-28</span>
            </p>
          </div>
        </GlassCard>

        {/* Session History */}
        <div className="flex-1">
          <div className="flex items-center justify-between mb-4">
            <h3 className="font-medium flex items-center gap-2">
              <Clock className="w-4 h-4" />
              Recent Sessions
            </h3>
            <span className="text-xs text-gray-400">{recentSessions.length} sessions</span>
          </div>
          
          <div className="space-y-3 max-h-[400px] overflow-y-auto">
            {recentSessions.map((session) => (
              <SessionHistoryItem 
                key={session.id} 
                session={session} 
                onClick={handleSessionClick}
              />
            ))}
          </div>
        </div>

        {/* Quick Actions */}
        <div className="grid grid-cols-3 gap-2">
          <button 
            onClick={handleStartSession}
            className="p-3 bg-green-500/20 hover:bg-green-500/30 rounded-lg text-sm transition-colors flex items-center justify-center gap-2"
          >
            <Play className="w-4 h-4" />
            Start
          </button>
          <button 
            onClick={handlePlanProject}
            className="p-3 bg-purple-500/20 hover:bg-purple-500/30 rounded-lg text-sm transition-colors flex items-center justify-center gap-2"
          >
            <Zap className="w-4 h-4" />
            Plan
          </button>
          <button className="p-3 bg-blue-500/20 hover:bg-blue-500/30 rounded-lg text-sm transition-colors flex items-center justify-center gap-2">
            <Calendar className="w-4 h-4" />
            Schedule
          </button>
        </div>

        {/* Status Bar */}
        <GlassCard className="p-3">
          <div className="flex items-center justify-between text-sm">
            <div className="flex items-center gap-2">
              <Activity className="w-4 h-4 text-green-400" />
              <span className="text-gray-300">System Ready</span>
            </div>
            <span className="text-gray-400">Last check: {new Date().toLocaleTimeString()}</span>
          </div>
        </GlassCard>
      </div>
    </div>
  );
}
