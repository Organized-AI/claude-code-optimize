<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Claude Monitor Dashboard</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }
        
        .container {
            max-width: 1400px;
            margin: 0 auto;
        }
        
        h1 {
            color: white;
            text-align: center;
            margin-bottom: 30px;
            font-size: 2.5em;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.2);
        }
        
        .activity-feed h2 {
            margin-bottom: 20px;
            color: #333;
            font-size: 1.5em;
            border-bottom: 2px solid #f0f0f0;
            padding-bottom: 10px;
        }
        
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        
        .process-status {
            background: white;
            border-radius: 10px;
            padding: 15px;
            margin-bottom: 20px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
            display: flex;
            gap: 20px;
            align-items: center;
        }
        
        .process-indicator {
            display: flex;
            align-items: center;
            gap: 8px;
            padding: 8px 16px;
            border-radius: 20px;
            font-size: 0.9em;
            font-weight: 600;
        }
        
        .process-running {
            background: #e8f5e9;
            color: #2e7d32;
        }
        
        .process-stopped {
            background: #ffebee;
            color: #c62828;
        }
        
        .stat-card {
            background: white;
            border-radius: 10px;
            padding: 20px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
            transition: transform 0.3s ease;
        }
        
        .stat-card:hover {
            transform: translateY(-5px);
        }
        
        .stat-label {
            color: #666;
            font-size: 0.9em;
            margin-bottom: 5px;
        }
        
        .stat-value {
            font-size: 2em;
            font-weight: bold;
            color: #333;
        }
        
        .activity-feed {
            background: white;
            border-radius: 10px;
            padding: 20px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
            max-height: 700px;
            overflow-y: auto;
        }
        
        .activity-item {
            padding: 15px;
            border-bottom: 1px solid #eee;
            display: flex;
            align-items: center;
            gap: 15px;
            animation: slideIn 0.3s ease;
        }
        
        @keyframes slideIn {
            from {
                opacity: 0;
                transform: translateX(-20px);
            }
            to {
                opacity: 1;
                transform: translateX(0);
            }
        }
        
        .activity-item:last-child {
            border-bottom: none;
        }
        
        .activity-icon {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.2em;
        }
        
        .claude-code {
            background: #4CAF50;
            color: white;
        }
        
        .claude-desktop {
            background: #FF9800;
            color: white;
        }
        
        .system {
            background: #2196F3;
            color: white;
        }
        
        .activity-content {
            flex: 1;
        }
        
        .activity-source {
            font-weight: bold;
            color: #333;
        }
        
        .activity-type {
            color: #666;
            font-size: 0.9em;
        }
        
        .activity-time {
            color: #999;
            font-size: 0.8em;
        }
        
        .connection-status {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 10px 20px;
            border-radius: 20px;
            color: white;
            font-weight: bold;
            box-shadow: 0 5px 15px rgba(0,0,0,0.2);
        }
        
        .connected {
            background: #4CAF50;
        }
        
        .disconnected {
            background: #f44336;
        }
        

    </style>
</head>
<body>
    <div class="connection-status disconnected" id="connectionStatus">
        Disconnected
    </div>
    
    <div class="container">
        <h1>üöÄ Claude Monitor Dashboard</h1>
        
        <div class="stats-grid">
            <div class="stat-card">
                <div class="stat-label">Total Activities</div>
                <div class="stat-value" id="totalActivities">0</div>
            </div>
            <div class="stat-card">
                <div class="stat-label">Today's Activities</div>
                <div class="stat-value" id="todayActivities">0</div>
            </div>
            <div class="stat-card">
                <div class="stat-label">Claude Code</div>
                <div class="stat-value" id="claudeCodeCount">0</div>
            </div>
            <div class="stat-card">
                <div class="stat-label">Claude Desktop</div>
                <div class="stat-value" id="claudeDesktopCount">0</div>
            </div>
        </div>
        
        <div class="process-status" id="processStatus">
            <div class="process-indicator process-stopped" id="claudeDesktopStatus">
                <span class="status-dot">‚óè</span> Claude Desktop: Stopped
            </div>
            <div class="process-indicator process-stopped" id="claudeCodeStatus">
                <span class="status-dot">‚óè</span> Claude Code: Stopped
            </div>
        </div>
        
        <div class="activity-feed">
            <h2>Live Activity Feed</h2>
            <div id="activityList"></div>
        </div>
    </div>
    

    <script>
        // WebSocket connection
        let ws;
        let reconnectInterval;
        const maxActivities = 50;
        const activities = [];
        const processStatus = {
            'Claude Desktop': false,
            'Claude Code': false
        };
        let lastProcessUpdate = {};

        
        function connectWebSocket() {
            ws = new WebSocket('ws://localhost:3001');
            
            ws.onopen = () => {
                console.log('Connected to dashboard server');
                document.getElementById('connectionStatus').textContent = 'Connected';
                document.getElementById('connectionStatus').className = 'connection-status connected';
                clearInterval(reconnectInterval);
            };
            
            ws.onmessage = (event) => {
                const message = JSON.parse(event.data);
                
                if (message.type === 'new_activity') {
                    addActivity(message.activity);
                } else if (message.type === 'stats') {
                    updateStats(message.data);
                }
            };
            
            ws.onclose = () => {
                console.log('Disconnected from server');
                document.getElementById('connectionStatus').textContent = 'Disconnected';
                document.getElementById('connectionStatus').className = 'connection-status disconnected';
                
                // Try to reconnect every 5 seconds
                reconnectInterval = setInterval(() => {
                    console.log('Attempting to reconnect...');
                    connectWebSocket();
                }, 5000);
            };
            
            ws.onerror = (error) => {
                console.error('WebSocket error:', error);
            };
        }
        
        function addActivity(activity) {
            // Handle system process events separately
            if (activity.source === 'system' && activity.type === 'process') {
                updateProcessStatus(activity);
                return; // Don't add to activity feed
            }
            
            activities.unshift(activity);
            if (activities.length > maxActivities) {
                activities.pop();
            }
            
            renderActivities();
        }
        
        function updateProcessStatus(activity) {
            try {
                const data = typeof activity.data === 'string' ? JSON.parse(activity.data) : activity.data;
                const app = data.app;
                const status = data.status === 'running';
                const pid = data.pid;
                
                // Only update if status changed
                if (processStatus[app] !== status) {
                    processStatus[app] = status;
                    
                    // Update UI
                    if (app === 'Claude Desktop') {
                        const elem = document.getElementById('claudeDesktopStatus');
                        elem.className = `process-indicator ${status ? 'process-running' : 'process-stopped'}`;
                        elem.innerHTML = `<span class="status-dot">‚óè</span> Claude Desktop: ${status ? 'Running (PID: ' + pid + ')' : 'Stopped'}`;
                    } else if (app === 'Claude Code' || app === 'Claude CLI') {
                        const elem = document.getElementById('claudeCodeStatus');
                        elem.className = `process-indicator ${status ? 'process-running' : 'process-stopped'}`;
                        elem.innerHTML = `<span class="status-dot">‚óè</span> Claude Code: ${status ? 'Running (PID: ' + pid + ')' : 'Stopped'}`;
                    }
                    
                    // Add a notification to feed only on status change
                    const changeActivity = {
                        ...activity,
                        type: 'status-change',
                        data: {
                            ...data,
                            message: `${app} ${status ? 'started' : 'stopped'}`
                        }
                    };
                    
                    activities.unshift(changeActivity);
                    if (activities.length > maxActivities) {
                        activities.pop();
                    }
                    renderActivities();
                }
                
                lastProcessUpdate[app] = Date.now();
            } catch (e) {
                console.error('Error updating process status:', e);
            }
        }
        
        function renderActivities() {
            const list = document.getElementById('activityList');
            list.innerHTML = activities.map(activity => {
                const icon = getIcon(activity.source, activity.type);
                const time = new Date(activity.timestamp).toLocaleTimeString();
                let description = activity.type;
                
                // Custom descriptions for different types
                if (activity.type === 'status-change' && activity.data) {
                    const data = typeof activity.data === 'string' ? JSON.parse(activity.data) : activity.data;
                    description = data.message || description;
                } else if (activity.type === 'message' && activity.data) {
                    const data = typeof activity.data === 'string' ? JSON.parse(activity.data) : activity.data;
                    description = data.content || data.session || description;
                } else if (activity.type === 'activity' && activity.data) {
                    const data = typeof activity.data === 'string' ? JSON.parse(activity.data) : activity.data;
                    description = data.file ? `File: ${data.file}` : description;
                }
                
                return `
                    <div class="activity-item">
                        <div class="activity-icon ${activity.source}">
                            ${icon}
                        </div>
                        <div class="activity-content">
                            <div class="activity-source">${formatSource(activity.source)}</div>
                            <div class="activity-type">${description}</div>
                        </div>
                        <div class="activity-time">${time}</div>
                    </div>
                `;
            }).join('');
        }
        
        function getIcon(source, type) {
            if (type === 'status-change') return 'üîÑ';
            switch(source) {
                case 'claude-code': return '‚å®Ô∏è';
                case 'claude-desktop': return 'üñ•Ô∏è';
                case 'system': return '‚öôÔ∏è';
                default: return 'üìä';
            }
        }
        
        function formatSource(source) {
            return source.split('-').map(word => 
                word.charAt(0).toUpperCase() + word.slice(1)
            ).join(' ');
        }
        
        function updateStats(stats) {
            document.getElementById('totalActivities').textContent = stats.totalActivities || 0;
            document.getElementById('todayActivities').textContent = stats.todayActivities || 0;
            document.getElementById('claudeCodeCount').textContent = stats.sources['claude-code'] || 0;
            document.getElementById('claudeDesktopCount').textContent = stats.sources['claude-desktop'] || 0;
            
            // Load recent activities
            if (stats.recentActivities) {
                stats.recentActivities.forEach(activity => {
                    activity.data = JSON.parse(activity.data || '{}');
                    activities.push(activity);
                });
                renderActivities();
            }
        }

        
        // Load initial stats
        fetch('/api/stats')
            .then(res => res.json())
            .then(stats => updateStats(stats))
            .catch(err => console.error('Failed to load stats:', err));
        
        // Connect WebSocket
        connectWebSocket();
    </script>
</body>
</html>
