<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Claude Monitor Dashboard</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }
        
        .container {
            max-width: 1400px;
            margin: 0 auto;
        }
        
        h1 {
            color: white;
            text-align: center;
            margin-bottom: 30px;
            font-size: 2.5em;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.2);
        }
        
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        
        .stat-card {
            background: white;
            border-radius: 15px;
            padding: 25px;
            text-align: center;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
            border: 3px solid transparent;
            transition: all 0.3s ease;
        }
        
        .stat-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 20px 40px rgba(0,0,0,0.2);
        }
        
        .stat-card.token-metrics {
            background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
            color: white;
        }
        
        .stat-card.efficiency-card {
            background: linear-gradient(135deg, #43e97b 0%, #38f9d7 100%);
            color: white;
        }
        
        .stat-label {
            font-size: 0.9em;
            opacity: 0.8;
            margin-bottom: 10px;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 1px;
        }
        
        .stat-value {
            font-size: 2.2em;
            font-weight: bold;
            color: #333;
        }
        
        .token-metrics .stat-value,
        .efficiency-card .stat-value {
            color: white;
        }
        
        .stat-subvalue {
            font-size: 0.8em;
            opacity: 0.7;
            margin-top: 5px;
        }
        
        .process-status {
            background: white;
            border-radius: 15px;
            padding: 20px;
            margin-bottom: 30px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
            display: flex;
            gap: 30px;
            align-items: center;
            justify-content: center;
        }
        
        .process-indicator {
            display: flex;
            align-items: center;
            gap: 10px;
            font-weight: 600;
            font-size: 1.1em;
            padding: 10px 20px;
            border-radius: 10px;
            transition: all 0.3s ease;
        }
        
        .process-running {
            color: #10b981;
            background: rgba(16, 185, 129, 0.1);
        }
        
        .process-stopped {
            color: #ef4444;
            background: rgba(239, 68, 68, 0.1);
        }
        
        .status-dot {
            font-size: 1.2em;
        }
        
        .activity-feed {
            background: white;
            border-radius: 15px;
            padding: 25px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
            max-height: 600px;
            overflow-y: auto;
        }
        
        .activity-feed h2 {
            margin-bottom: 20px;
            color: #333;
            font-size: 1.5em;
            border-bottom: 2px solid #f0f0f0;
            padding-bottom: 10px;
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .activity-item {
            padding: 15px;
            border-left: 4px solid #e5e7eb;
            margin-bottom: 15px;
            background: #fafafa;
            border-radius: 8px;
            transition: all 0.3s ease;
        }
        
        .activity-item:hover {
            transform: translateX(5px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        }
        
        .activity-item.claude-code {
            border-left-color: #3b82f6;
            background: linear-gradient(90deg, rgba(59, 130, 246, 0.05) 0%, transparent 100%);
        }
        
        .activity-item.claude-desktop {
            border-left-color: #10b981;
            background: linear-gradient(90deg, rgba(16, 185, 129, 0.05) 0%, transparent 100%);
        }
        
        .activity-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 8px;
        }
        
        .activity-source {
            font-weight: 600;
            color: #374151;
        }
        
        .activity-time {
            font-size: 0.85em;
            color: #6b7280;
        }
        
        .activity-content {
            color: #4b5563;
            line-height: 1.4;
            font-size: 0.95em;
        }
        
        .token-breakdown {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 10px;
            margin-top: 10px;
        }
        
        .token-item {
            text-align: center;
            padding: 8px;
            background: rgba(255, 255, 255, 0.2);
            border-radius: 8px;
        }
        
        .token-item-label {
            font-size: 0.7em;
            opacity: 0.8;
            margin-bottom: 2px;
        }
        
        .token-item-value {
            font-weight: bold;
            font-size: 0.9em;
        }
        
        .efficiency-badge {
            display: inline-block;
            padding: 4px 8px;
            border-radius: 12px;
            font-size: 0.8em;
            font-weight: 600;
            background: rgba(255, 255, 255, 0.2);
            margin-top: 5px;
        }
        
        .session-timer-card {
            background: linear-gradient(135deg, #ec4899 0%, #be185d 100%);
            color: white;
        }
        
        .timer-value {
            font-family: 'SF Mono', 'Monaco', 'Inconsolata', 'Roboto Mono', monospace;
            font-size: 2.5em !important;
            font-weight: 700;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
        }
        
        .session-progress-container {
            margin: 10px 0;
            height: 8px;
            background: rgba(255, 255, 255, 0.2);
            border-radius: 4px;
            overflow: hidden;
        }
        
        .session-progress-bar {
            height: 100%;
            background: linear-gradient(90deg, #10b981 0%, #f59e0b 70%, #ef4444 100%);
            border-radius: 4px;
            transition: width 1s ease;
            width: 0%;
        }
        
        .session-timer-card .stat-subvalue {
            color: rgba(255, 255, 255, 0.9);
            font-weight: 500;
        }
        
        .session-active {
            color: #10b981 !important;
            font-weight: 600;
        }
        
        .session-idle {
            color: #f59e0b !important;
            font-weight: 600;
        }
        
        .session-expired {
            color: #ef4444 !important;
            font-weight: 600;
        }
        
        .connection-status {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 10px 15px;
            border-radius: 20px;
            color: white;
            font-weight: 600;
            font-size: 0.9em;
            z-index: 1000;
        }
        
        .connected {
            background: #10b981;
        }
        
        .disconnected {
            background: #ef4444;
        }
        
        .no-activities {
            text-align: center;
            color: #6b7280;
            padding: 40px;
            font-style: italic;
        }
        
        @keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.5; }
        }
        
        .live-indicator {
            animation: pulse 2s infinite;
            color: #10b981;
        }
    </style>
</head>
<body>
    <div class="connection-status" id="connectionStatus">Connecting...</div>
    
    <div class="container">
        <h1>🚀 Claude Monitor Dashboard</h1>
        
        <div class="stats-grid">
            <div class="stat-card">
                <div class="stat-label">Total Activities</div>
                <div class="stat-value" id="totalActivities">0</div>
                <div class="stat-subvalue" id="todayActivities">0 today</div>
            </div>
            
            <div class="stat-card">
                <div class="stat-label">Claude Code Sessions</div>
                <div class="stat-value" id="claudeCodeCount">0</div>
                <div class="stat-subvalue" id="claudeCodeMessages">0 messages</div>
            </div>
            
            <div class="stat-card">
                <div class="stat-label">Claude Desktop</div>
                <div class="stat-value" id="claudeDesktopCount">0</div>
                <div class="stat-subvalue">activities</div>
            </div>
            
            <div class="stat-card token-metrics">
                <div class="stat-label">Token Usage</div>
                <div class="stat-value" id="totalTokens">0</div>
                <div class="token-breakdown">
                    <div class="token-item">
                        <div class="token-item-label">Input</div>
                        <div class="token-item-value" id="inputTokens">0</div>
                    </div>
                    <div class="token-item">
                        <div class="token-item-label">Output</div>
                        <div class="token-item-value" id="outputTokens">0</div>
                    </div>
                    <div class="token-item">
                        <div class="token-item-label">Rate/min</div>
                        <div class="token-item-value" id="tokenRate">0</div>
                    </div>
                    <div class="token-item">
                        <div class="token-item-label">Cost</div>
                        <div class="token-item-value" id="tokenCost">$0.00</div>
                    </div>
                </div>
            </div>
            
            <div class="stat-card efficiency-card">
                <div class="stat-label">Cache Efficiency</div>
                <div class="stat-value" id="cacheEfficiency">0%</div>
                <div class="efficiency-badge" id="efficiencyBadge">Optimizing</div>
            </div>
            
            <div class="stat-card session-timer-card">
                <div class="stat-label">Session Timer</div>
                <div class="stat-value timer-value" id="sessionTimer">--:--</div>
                <div class="session-progress-container">
                    <div class="session-progress-bar" id="sessionProgressBar"></div>
                </div>
                <div class="stat-subvalue" id="sessionStatus">No active session</div>
            </div>
        </div>
        
        <div class="process-status" id="processStatus">
            <div class="process-indicator process-stopped" id="claudeCodeStatus">
                <span class="status-dot">●</span> Claude Code: Stopped
            </div>
            <div class="process-indicator process-stopped" id="claudeDesktopStatus">
                <span class="status-dot">●</span> Claude Desktop: Stopped
            </div>
        </div>
        
        <div class="activity-feed">
            <h2>
                <span class="live-indicator">●</span> Live Activity Feed
                <small style="font-size: 0.6em; color: #6b7280; margin-left: auto;">System events consolidated</small>
            </h2>
            <div id="activityList">
                <div class="no-activities">Waiting for Claude activity...</div>
            </div>
        </div>
    </div>

    <script>
        // WebSocket connection
        let ws;
        let reconnectInterval;
        let activities = [];
        let stats = {};
        let tokenMetrics = {
            total: 0,
            input: 0,
            output: 0,
            cacheCreation: 0,
            cacheRead: 0
        };
        
        let activeSessions = [];
        let sessionTimerInterval;

        function connectWebSocket() {
            ws = new WebSocket('ws://localhost:3001');
            
            ws.onopen = function() {
                console.log('Connected to WebSocket');
                document.getElementById('connectionStatus').textContent = 'Connected';
                document.getElementById('connectionStatus').className = 'connection-status connected';
                clearInterval(reconnectInterval);
                fetchInitialData();
            };
            
            ws.onmessage = function(event) {
                const data = JSON.parse(event.data);
                if (data.type === 'activity') {
                    handleNewActivity(data.activity);
                } else if (data.type === 'stats') {
                    updateStats(data.stats);
                }
            };
            
            ws.onclose = function() {
                console.log('WebSocket disconnected');
                document.getElementById('connectionStatus').textContent = 'Disconnected';
                document.getElementById('connectionStatus').className = 'connection-status disconnected';
                
                // Attempt to reconnect every 3 seconds
                reconnectInterval = setInterval(connectWebSocket, 3000);
            };
            
            ws.onerror = function(error) {
                console.error('WebSocket error:', error);
            };
        }

        async function fetchInitialData() {
            try {
                // Fetch stats
                const statsResponse = await fetch('/api/stats');
                const statsData = await statsResponse.json();
                updateStats(statsData);
                
                // Fetch recent activities (filter out system process events)
                const activitiesResponse = await fetch('/api/activities?limit=20');
                const activitiesData = await activitiesResponse.json();
                
                // Process all activities for initial status
                const allActivities = activitiesData;
                
                // Update process status from recent system events
                allActivities.forEach(activity => {
                    if (activity.source === 'system' && activity.type === 'process') {
                        updateProcessStatus(activity);
                    }
                });
                
                // Filter activities for display (remove system process events)
                activities = activitiesData.filter(activity =>
                    !(activity.source === 'system' && activity.type === 'process')
                );
                
                updateActivityFeed();
                
                // Fetch token metrics
                await fetchTokenMetrics();
                
                // Fetch Claude Code sessions
                await fetchClaudeSessions();
                
            } catch (error) {
                console.error('Error fetching initial data:', error);
            }
        }

        async function fetchTokenMetrics() {
            try {
                const response = await fetch('/api/token-metrics');
                if (response.ok) {
                    const metrics = await response.json();
                    tokenMetrics = metrics;
                    updateTokenMetrics();
                }
            } catch (error) {
                console.error('Error fetching token metrics:', error);
            }
        }

        function updateTokenMetrics() {
            document.getElementById('totalTokens').textContent = formatNumber(tokenMetrics.total);
            document.getElementById('inputTokens').textContent = formatNumber(tokenMetrics.input);
            document.getElementById('outputTokens').textContent = formatNumber(tokenMetrics.output);
            
            // Get rate and cost from active session if available
            const activeSession = activeSessions.find(session => session.isActive);
            if (activeSession) {
                document.getElementById('tokenRate').textContent = formatNumber(activeSession.cost.ratePerMin);
                document.getElementById('tokenCost').textContent = '$' + activeSession.cost.estimate.toFixed(2);
            } else {
                document.getElementById('tokenRate').textContent = '0';
                document.getElementById('tokenCost').textContent = '$0.00';
            }
            
            // Calculate cache efficiency
            const totalInput = tokenMetrics.input + tokenMetrics.cacheCreation;
            const efficiency = totalInput > 0 ? (tokenMetrics.cacheRead / (tokenMetrics.cacheRead + totalInput)) * 100 : 0;
            
            document.getElementById('cacheEfficiency').textContent = efficiency.toFixed(1) + '%';
            
            const badge = document.getElementById('efficiencyBadge');
            if (efficiency > 50) {
                badge.textContent = 'Excellent';
            } else if (efficiency > 20) {
                badge.textContent = 'Good';
            } else {
                badge.textContent = 'Building Cache';
            }
        }

        function formatNumber(num) {
            if (num >= 1000000) {
                return (num / 1000000).toFixed(1) + 'M';
            } else if (num >= 1000) {
                return (num / 1000).toFixed(1) + 'K';
            }
            return num.toString();
        }

        function handleNewActivity(activity) {
            // Filter out system process events from the feed (but handle for status)
            if (activity.source === 'system' && activity.type === 'process') {
                updateProcessStatus(activity);
                return;
            }
            
            // Add to activities and limit to 50 items
            activities.unshift(activity);
            if (activities.length > 50) {
                activities.pop();
            }
            
            updateActivityFeed();
            
            // Update token metrics if it's a Claude Code message with usage
            if (activity.source === 'claude-code' && activity.data.message && activity.data.message.usage) {
                updateTokenMetricsFromActivity(activity);
            }
        }

        function updateTokenMetricsFromActivity(activity) {
            const usage = activity.data.message.usage;
            tokenMetrics.input += usage.input_tokens || 0;
            tokenMetrics.output += usage.output_tokens || 0;
            tokenMetrics.cacheCreation += usage.cache_creation_input_tokens || 0;
            tokenMetrics.cacheRead += usage.cache_read_input_tokens || 0;
            tokenMetrics.total = tokenMetrics.input + tokenMetrics.output + tokenMetrics.cacheCreation + tokenMetrics.cacheRead;
            
            updateTokenMetrics();
            
            // Refresh session data as well
            fetchClaudeSessions();
        }
        
        async function fetchClaudeSessions() {
            try {
                const response = await fetch('/api/claude-sessions');
                if (response.ok) {
                    activeSessions = await response.json();
                    updateSessionTimer();
                }
            } catch (error) {
                console.error('Error fetching Claude sessions:', error);
            }
        }
        
        function updateSessionTimer() {
            const activeSession = activeSessions.find(session => session.isActive);
            
            if (activeSession) {
                const remainingTime = activeSession.timing.remainingTime;
                const percentage = activeSession.timing.percentage;
                
                // Update timer display
                document.getElementById('sessionTimer').textContent = formatTimeRemaining(remainingTime);
                document.getElementById('sessionProgressBar').style.width = percentage + '%';
                
                // Update status based on remaining time
                let status = '';
                let statusClass = '';
                if (activeSession.isRealTimeActive) {
                    status = `🟢 Active - ${formatNumber(activeSession.tokens.total)} tokens`;
                    statusClass = 'session-active';
                } else if (remainingTime > 0) {
                    status = `🟡 Idle - ${Math.round(remainingTime / 60000)} min left`;
                    statusClass = 'session-idle';
                } else {
                    status = '🔴 Session Expired';
                    statusClass = 'session-expired';
                }
                
                document.getElementById('sessionStatus').textContent = status;
                document.getElementById('sessionStatus').className = 'stat-subvalue ' + statusClass;
                
                // Start the countdown timer if not already running
                if (!sessionTimerInterval && remainingTime > 0) {
                    sessionTimerInterval = setInterval(() => {
                        fetchClaudeSessions(); // Refresh data every minute
                    }, 60000);
                }
            } else {
                document.getElementById('sessionTimer').textContent = '--:--';
                document.getElementById('sessionProgressBar').style.width = '0%';
                document.getElementById('sessionStatus').textContent = 'No active session';
                document.getElementById('sessionStatus').className = 'stat-subvalue';
                
                // Clear timer interval
                if (sessionTimerInterval) {
                    clearInterval(sessionTimerInterval);
                    sessionTimerInterval = null;
                }
            }
            
            // Update token metrics with session data
            updateTokenMetrics();
        }
        
        function formatTimeRemaining(milliseconds) {
            if (milliseconds <= 0) return '0:00';
            
            const hours = Math.floor(milliseconds / (1000 * 60 * 60));
            const minutes = Math.floor((milliseconds % (1000 * 60 * 60)) / (1000 * 60));
            
            return `${hours}:${minutes.toString().padStart(2, '0')}`;
        }

        function updateProcessStatus(activity) {
            if (activity.data && activity.data.app) {
                const app = activity.data.app;
                const status = activity.data.status;
                const pid = activity.data.pid;
                
                let elementId, displayName;
                if (app === 'Claude Code') {
                    elementId = 'claudeCodeStatus';
                    displayName = 'Claude Code';
                } else if (app === 'Claude Desktop') {
                    elementId = 'claudeDesktopStatus';
                    displayName = 'Claude Desktop';
                }
                
                if (elementId) {
                    const element = document.getElementById(elementId);
                    element.className = `process-indicator process-${status}`;
                    element.innerHTML = `<span class="status-dot">●</span> ${displayName}: ${status === 'running' ? `Running (PID: ${pid})` : 'Stopped'}`;
                }
            }
        }

        function updateStats(statsData) {
            stats = statsData;
            
            document.getElementById('totalActivities').textContent = statsData.totalActivities || 0;
            document.getElementById('todayActivities').textContent = (statsData.todayActivities || 0) + ' today';
            
            // Count only non-system activities for display
            const claudeCodeActivities = statsData.sources ? (statsData.sources['claude-code'] || 0) : 0;
            const claudeDesktopActivities = statsData.sources ? (statsData.sources['claude-desktop'] || 0) : 0;
            
            document.getElementById('claudeCodeCount').textContent = claudeCodeActivities;
            document.getElementById('claudeCodeMessages').textContent = claudeCodeActivities + ' messages';
            document.getElementById('claudeDesktopCount').textContent = claudeDesktopActivities;
        }

        function updateActivityFeed() {
            const activityList = document.getElementById('activityList');
            
            if (activities.length === 0) {
                activityList.innerHTML = '<div class="no-activities">No activities to display (system events filtered)</div>';
                return;
            }
            
            activityList.innerHTML = activities.map(activity => {
                const time = new Date(activity.timestamp).toLocaleTimeString();
                const sourceClass = activity.source.replace('-', '');
                
                let content = 'Activity detected';
                if (activity.data) {
                    if (typeof activity.data === 'string') {
                        try {
                            const parsed = JSON.parse(activity.data);
                            content = formatActivityContent(parsed, activity.source, activity.type);
                        } catch (e) {
                            content = activity.data;
                        }
                    } else {
                        content = formatActivityContent(activity.data, activity.source, activity.type);
                    }
                }
                
                return `
                    <div class="activity-item ${sourceClass}">
                        <div class="activity-header">
                            <span class="activity-source">${getSourceIcon(activity.source)} ${formatSource(activity.source)}</span>
                            <span class="activity-time">${time}</span>
                        </div>
                        <div class="activity-content">${content}</div>
                    </div>
                `;
            }).join('');
        }

        function formatActivityContent(data, source, type) {
            if (source === 'claude-code' && data.message) {
                const message = data.message;
                if (message.role === 'user') {
                    return `💬 User: "${truncateText(message.content, 100)}"`;
                } else if (message.role === 'assistant') {
                    const content = message.content?.[0]?.text || 'Response generated';
                    const usage = message.usage;
                    let usageText = '';
                    if (usage) {
                        usageText = ` (${usage.input_tokens}→${usage.output_tokens} tokens)`;
                    }
                    return `🤖 Claude: "${truncateText(content, 100)}"${usageText}`;
                }
            } else if (source === 'claude-desktop') {
                return `🖥️ Desktop activity: ${type}`;
            }
            
            return data.content || data.message || JSON.stringify(data).substring(0, 100);
        }

        function formatSource(source) {
            switch (source) {
                case 'claude-code': return 'Claude Code';
                case 'claude-desktop': return 'Claude Desktop';
                case 'system': return 'System';
                default: return source;
            }
        }

        function getSourceIcon(source) {
            switch (source) {
                case 'claude-code': return '⌨️';
                case 'claude-desktop': return '🖥️';
                case 'system': return '⚙️';
                default: return '📝';
            }
        }

        function truncateText(text, maxLength) {
            if (text.length <= maxLength) return text;
            return text.substring(0, maxLength) + '...';
        }

        // Initialize
        connectWebSocket();
        
        // Refresh token metrics every 30 seconds
        setInterval(fetchTokenMetrics, 30000);
    </script>
</body>
</html>
