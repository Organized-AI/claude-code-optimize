{
  "generated_at": "2025-08-18T22:22:32.501687",
  "system_analysis": {
    "databases": {
      "sessions": {
        "record_count": 8,
        "columns": 29,
        "size_estimate": 23200
      },
      "five_hour_blocks": {
        "record_count": 2,
        "columns": 12,
        "size_estimate": 2400
      },
      "message_breakdown": {
        "record_count": 4,
        "columns": 9,
        "size_estimate": 3600
      },
      "sqlite_sequence": {
        "record_count": 3,
        "columns": 2,
        "size_estimate": 600
      },
      "tool_usage": {
        "record_count": 5,
        "columns": 6,
        "size_estimate": 3000
      },
      "cost_breakdown": {
        "record_count": 1,
        "columns": 8,
        "size_estimate": 800
      }
    },
    "files": {
      "*.json": {
        "count": 3658,
        "total_size": 39148117
      },
      "*.jsonl": {
        "count": 4,
        "total_size": 578340
      },
      "*.log": {
        "count": 89,
        "total_size": 23041536
      },
      "*.db": {
        "count": 89,
        "total_size": 608415744
      }
    },
    "issues": [
      "Missing 'real_sessions' table referenced in monitoring scripts"
    ],
    "recommendations": [
      "Consolidate multiple databases into Supabase",
      "Archive old JSONL files after processing",
      "Implement proper error handling for missing tables",
      "Add data validation before migration"
    ]
  },
  "migration_steps": [
    {
      "name": "backup_current_data",
      "description": "Create complete backup of current system",
      "source": "all_databases",
      "target": "backup_directory"
    },
    {
      "name": "validate_schemas",
      "description": "Validate source and target schemas compatibility",
      "source": "sqlite_schema",
      "target": "supabase_schema"
    },
    {
      "name": "migrate_five_hour_blocks",
      "description": "Migrate five_hour_blocks table to Supabase",
      "source": "sqlite.five_hour_blocks",
      "target": "supabase.five_hour_blocks"
    },
    {
      "name": "migrate_sessions",
      "description": "Migrate sessions table with data transformation",
      "source": "sqlite.sessions",
      "target": "supabase.sessions"
    },
    {
      "name": "migrate_message_breakdown",
      "description": "Migrate message breakdown with deduplication",
      "source": "sqlite.message_breakdown",
      "target": "supabase.message_breakdown"
    },
    {
      "name": "migrate_cost_breakdown",
      "description": "Migrate cost breakdown data",
      "source": "sqlite.cost_breakdown",
      "target": "supabase.cost_breakdown"
    },
    {
      "name": "migrate_tool_usage",
      "description": "Migrate tool usage statistics",
      "source": "sqlite.tool_usage",
      "target": "supabase.tool_usage"
    },
    {
      "name": "setup_analytics_cache",
      "description": "Initialize local analytics SQLite cache",
      "source": "supabase_aggregates",
      "target": "sqlite_analytics"
    },
    {
      "name": "validate_migration",
      "description": "Validate data integrity after migration",
      "source": "supabase",
      "target": "validation_report"
    },
    {
      "name": "archive_old_files",
      "description": "Archive processed JSONL and log files",
      "source": "old_files",
      "target": "archive"
    }
  ],
  "time_estimate": {
    "total_records": 23,
    "estimated_duration_seconds": 0.023,
    "estimated_duration_human": "0.0 minutes",
    "recommended_maintenance_window": "2 hours"
  },
  "rollback_plan": {
    "backup_current_data": {
      "description": "Rollback Create complete backup of current system",
      "actions": [
        "No rollback needed - backup is read-only"
      ],
      "verification": [
        "Verify all_databases is accessible",
        "Check record counts match pre-migration",
        "Validate application functionality"
      ]
    },
    "validate_schemas": {
      "description": "Rollback Validate source and target schemas compatibility",
      "actions": [
        "Revert configuration changes",
        "Clear cache"
      ],
      "verification": [
        "Verify sqlite_schema is accessible",
        "Check record counts match pre-migration",
        "Validate application functionality"
      ]
    },
    "migrate_five_hour_blocks": {
      "description": "Rollback Migrate five_hour_blocks table to Supabase",
      "actions": [
        "DROP TABLE IF EXISTS supabase.five_hour_blocks",
        "Restore from backup: sqlite.five_hour_blocks",
        "Update sync_status to mark rollback"
      ],
      "verification": [
        "Verify sqlite.five_hour_blocks is accessible",
        "Check record counts match pre-migration",
        "Validate application functionality"
      ]
    },
    "migrate_sessions": {
      "description": "Rollback Migrate sessions table with data transformation",
      "actions": [
        "DROP TABLE IF EXISTS supabase.sessions",
        "Restore from backup: sqlite.sessions",
        "Update sync_status to mark rollback"
      ],
      "verification": [
        "Verify sqlite.sessions is accessible",
        "Check record counts match pre-migration",
        "Validate application functionality"
      ]
    },
    "migrate_message_breakdown": {
      "description": "Rollback Migrate message breakdown with deduplication",
      "actions": [
        "DROP TABLE IF EXISTS supabase.message_breakdown",
        "Restore from backup: sqlite.message_breakdown",
        "Update sync_status to mark rollback"
      ],
      "verification": [
        "Verify sqlite.message_breakdown is accessible",
        "Check record counts match pre-migration",
        "Validate application functionality"
      ]
    },
    "migrate_cost_breakdown": {
      "description": "Rollback Migrate cost breakdown data",
      "actions": [
        "DROP TABLE IF EXISTS supabase.cost_breakdown",
        "Restore from backup: sqlite.cost_breakdown",
        "Update sync_status to mark rollback"
      ],
      "verification": [
        "Verify sqlite.cost_breakdown is accessible",
        "Check record counts match pre-migration",
        "Validate application functionality"
      ]
    },
    "migrate_tool_usage": {
      "description": "Rollback Migrate tool usage statistics",
      "actions": [
        "DROP TABLE IF EXISTS supabase.tool_usage",
        "Restore from backup: sqlite.tool_usage",
        "Update sync_status to mark rollback"
      ],
      "verification": [
        "Verify sqlite.tool_usage is accessible",
        "Check record counts match pre-migration",
        "Validate application functionality"
      ]
    },
    "setup_analytics_cache": {
      "description": "Rollback Initialize local analytics SQLite cache",
      "actions": [
        "Revert configuration changes",
        "Clear cache"
      ],
      "verification": [
        "Verify supabase_aggregates is accessible",
        "Check record counts match pre-migration",
        "Validate application functionality"
      ]
    },
    "validate_migration": {
      "description": "Rollback Validate data integrity after migration",
      "actions": [
        "Revert configuration changes",
        "Clear cache"
      ],
      "verification": [
        "Verify supabase is accessible",
        "Check record counts match pre-migration",
        "Validate application functionality"
      ]
    },
    "archive_old_files": {
      "description": "Rollback Archive processed JSONL and log files",
      "actions": [
        "Restore files from archive directory"
      ],
      "verification": [
        "Verify old_files is accessible",
        "Check record counts match pre-migration",
        "Validate application functionality"
      ]
    }
  },
  "pre_migration_checklist": [
    {
      "task": "Backup all databases",
      "command": "python migrations/backup_current_system.py",
      "critical": true
    },
    {
      "task": "Stop all monitoring services",
      "command": "pkill -f 'claude-code-session-monitor.py'",
      "critical": true
    },
    {
      "task": "Verify Supabase connection",
      "command": "python migrations/test_supabase_connection.py",
      "critical": true
    },
    {
      "task": "Check disk space",
      "command": "df -h",
      "critical": true
    },
    {
      "task": "Notify team of maintenance",
      "command": "echo 'Migration starting' | cco-notify",
      "critical": false
    }
  ],
  "post_migration_checklist": [
    {
      "task": "Verify data integrity",
      "command": "python tests/migration_validation.py",
      "critical": true
    },
    {
      "task": "Test session detection",
      "command": "python src/detection/test_detection.py",
      "critical": true
    },
    {
      "task": "Verify dashboard connectivity",
      "command": "curl http://localhost:3003/api/health",
      "critical": true
    },
    {
      "task": "Check performance metrics",
      "command": "python tests/performance_benchmarks.py",
      "critical": false
    },
    {
      "task": "Start monitoring services",
      "command": "python start_smart_monitoring.sh",
      "critical": true
    }
  ],
  "risk_assessment": {
    "risk_level": "medium",
    "main_risks": [
      "Data loss if backup fails",
      "Service downtime during migration",
      "Performance degradation if indexes not created"
    ],
    "mitigation_strategies": [
      "Verify backups before proceeding",
      "Run migration during low-usage hours",
      "Test on staging environment first"
    ]
  }
}